#include "pch.h" //Основные библиотеки
#include <iostream> //cin cout

using namespace std;//Пространство имен

struct Spisok {//Описываем нашу структуру 
	int info;//Создаем поле для хранения числа
	Spisok *next;//Указатель на следующий элемент
}*head = nullptr;//Сразу объявляем указатель на список

//Функция добавление элемента в список
void push(int in) //Добавляем элемент 
{
	if (head==nullptr)//Если список пуст, то ставим наш указатель head на вершину
	{
		head = new Spisok;//Создаем новый элемент
		head->next = nullptr;//Новый элемент никуда не указывает
		head->info = in;//Добавляем информацию в элемент
		return;//Выход
	}

	Spisok *bufer = head;//Запоменаем начало списка

	while (bufer->next != nullptr)//идем до последнего элемента
	{
		bufer = bufer->next;
	}

	bufer->next = new Spisok;//Создаем новый элемент
	bufer->next->info = in;//Добавляем информацию в элемент
	bufer->next->next = nullptr;//Новый элемент никуда не указывает	
}
//////////////////////////////////////////////////////////////////////////////

void View()//Просмотр Списка
{
	if (head == nullptr)
	{
		cout << "Список пуст";
		return;//Выход
	}

	Spisok *t = head;

	while (t != nullptr)//Пока элемент на что то указывает , идем по нему 
	{
		cout << t->info << " ";//Вывод значения элемента в котором сейчас находимся 
		t = t->next;//Переходим на новый элемент	
	}
}
////////////////////////////////////////////////////////////////////////////////


//Функция для удаления вершины списка
void pop()
{
	Spisok *bufer = head;//Запоминаем элемент который будем удалять
	head = head->next;//Переносим  указатель вершины на след. элемент
	delete bufer;//Удаляем бывшую вершину
}
//////////////////////////////////////////////////////////////////////////////////////////////

//Функция удаление элемента по его номеру
void del(int num) 
{
	if (head == nullptr)
	{
		cout << "Список пуст";
		return;//Выход
	}

	if (num == 0)
	{
		pop();
		return;
	}

	Spisok *previous = head;//Запоминаем прошлый элемент

	if (previous->next == nullptr)//Если сработало данное условие значит в стеке только 1 элемент.И так как у нас только один элемент , а пользователь явно пожелал удалить элемент номер которого > 0 то смело можем сказать что пользователь хочет удалить элемент которого нет.
	{
		cout << "Элемента с таким номером не сущ.";
		return;//Выход
	}

	for (int i = 1; i < num; i++)//Идем до нашего элемента не доходя на 1 элемент  
	{
		if (previous->next == nullptr)//Если мы не дошли до указоного номера , а стек уже закончился , значит такого элемента не сущ.
		{
			cout << "Элемента с таким номером не сущ.";
			return;//Выход
		}
		previous = previous->next;//Идем на след. элемент
	}

	Spisok *ToDel = previous->next;//Элемент который будем удалять 

	previous->next = ToDel->next;//выбрасываем элемент из стека 

	delete ToDel;//Удаляем элемент

}
//////////////////////////////////////////////////////////////////////////////////////////////

//Функция для удаление всего Списка
void delAll()
{
	if (head == nullptr)
	{
		cout << "Список пуст";
		return;//Выход
	}

	while (head != nullptr)//Пока не дайдем до пустоты , удаляем вершину
	{
		pop();//Что происходит в этой функции можно посмотреть выше
	}
}

int main()//Точка входа
{
	//Создать очередь из семи целых чисел, удалить четные числа, освободить память.
	//Разбиваем задачу на подпункты:
	//1)Создать 7 элементов
	//2)Удалить четные числа
	//3)освободить память

	//Первый пункт выполняется легко
	
}
